# Vercel Production Deployment Setup

## Task Status: ðŸ“‹ PLANNED (Ready for Execution)

### Overview
Deploy the HubSpot UI Extension backend to Vercel with proper environment configuration, domain setup, and HubSpot integration.

## Prerequisites

### Account Setup
- [ ] Vercel account created at https://vercel.com
- [ ] Vercel CLI installed: `npm install -g vercel`
- [ ] Repository connected to Vercel (optional, can deploy via CLI)

### Code Requirements
- [x] Backend code production-ready in `packages/vercel-backend/`
- [x] Environment variables defined and documented
- [x] Serverless configuration in `vercel.json`
- [x] Database connections configured for production

## Step-by-Step Deployment Process

### 1. Vercel CLI Setup
```bash
# Install and authenticate
npm install -g vercel
vercel login

# Navigate to backend package
cd packages/vercel-backend

# Link project (if not already linked)
vercel link
```

### 2. Environment Variables Configuration

#### Required Variables for Production
```bash
# HubSpot OAuth Configuration
HUBSPOT_CLIENT_ID=your_client_id_from_hubspot_app
HUBSPOT_CLIENT_SECRET=your_client_secret_from_hubspot_app
HUBSPOT_REDIRECT_URI=https://your-vercel-domain.vercel.app/auth/hubspot/callback
HUBSPOT_SCOPES=crm.objects.contacts.read,crm.objects.companies.read

# Database Configuration
DATABASE_URL=postgresql://username:password@ep-example.region.aws.neon.tech/dbname?sslmode=require
NEON_DATABASE_URL=your_neon_connection_string

# API Keys
OPENAI_API_KEY=your_openai_api_key
JWT_SECRET=your_jwt_secret_for_signing

# Vercel KV (for token storage)
KV_REST_API_URL=your_kv_rest_api_url
KV_REST_API_TOKEN=your_kv_rest_api_token
```

#### Set via Vercel Dashboard
1. Go to Vercel project settings
2. Navigate to Environment Variables
3. Add each variable for Production environment
4. Ensure sensitive variables are properly encrypted

#### Set via CLI (Alternative)
```bash
vercel env add HUBSPOT_CLIENT_ID
vercel env add HUBSPOT_CLIENT_SECRET
vercel env add DATABASE_URL
# ... continue for all variables
```

### 3. Production Deployment

#### Deploy to Production
```bash
# Deploy with production configuration
vercel --prod

# Alternative: specific target
vercel deploy --target production
```

#### Verify Deployment
```bash
# Check deployment status
vercel inspect DEPLOYMENT_URL

# View function logs
vercel logs

# Test health endpoint
curl https://your-deployment.vercel.app/api/health
```

### 4. Domain Configuration

#### Add Custom Domain (Optional)
```bash
# Add domain via CLI
vercel domains add your-domain.com

# Or configure via Vercel dashboard
# Project Settings > Domains > Add Domain
```

#### SSL Certificate
- Automatically handled by Vercel
- Custom domains get free SSL certificates
- Verify HTTPS works for all endpoints

### 5. HubSpot App Configuration Update

#### Update Redirect URLs
After successful deployment, update HubSpot app settings:

**Development Environment:**
- Redirect URL: `http://localhost:3000/auth/hubspot/callback`

**Production Environment:**
- Redirect URL: `https://your-vercel-domain.vercel.app/auth/hubspot/callback`
- Custom domain: `https://your-custom-domain.com/auth/hubspot/callback`

#### Steps to Update
1. Go to HubSpot Developer Portal
2. Navigate to your app
3. Go to Auth tab
4. Update redirect URLs
5. Save changes

### 6. Testing Production Deployment

#### API Endpoint Testing
```bash
# Health check
curl https://your-deployment.vercel.app/api/health

# OAuth status
curl https://your-deployment.vercel.app/api/auth/status

# Test database connection
curl https://your-deployment.vercel.app/api/reports/available
```

#### OAuth Flow Testing
1. Navigate to HubSpot install URL
2. Complete OAuth authorization
3. Verify callback works correctly
4. Check token storage in Vercel KV
5. Test API calls with stored tokens

### 7. Monitoring Setup

#### Vercel Analytics
- Enable analytics in project settings
- Monitor function performance
- Track error rates and response times

#### Error Monitoring
```bash
# View real-time logs
vercel logs --follow

# Check function errors
vercel logs --deployment DEPLOYMENT_ID
```

## Environment-Specific Configuration

### Development
- Use local environment with `vercel dev`
- Pull production variables: `vercel env pull --environment=development`
- Test with HubSpot sandbox account

### Preview (Staging)
- Automatic deployments on feature branches
- Use separate HubSpot app for staging
- Test OAuth flow before production

### Production
- Deploy with `vercel --prod`
- Use production HubSpot app
- Monitor performance and errors

## Security Checklist

### Pre-Deployment
- [ ] All secrets stored in Vercel environment variables
- [ ] No hardcoded credentials in code
- [ ] CORS headers configured for HubSpot domains
- [ ] HTTPS enforced for all endpoints
- [ ] Input validation on all API routes

### Post-Deployment
- [ ] SSL certificates active
- [ ] OAuth flow works end-to-end
- [ ] Error messages don't leak sensitive info
- [ ] Rate limiting functional
- [ ] Database connections secured

## Troubleshooting

### Common Issues

#### Environment Variables Not Loading
```bash
# Check variables are set
vercel env ls

# Redeploy with fresh environment
vercel --prod --force
```

#### Database Connection Failures
- Verify connection string format
- Check Neon database status
- Test connection pooling settings
- Review firewall rules

#### CORS Issues
- Verify origin headers
- Check middleware configuration
- Test with browser developer tools

#### OAuth Callback Failures
- Verify redirect URLs match exactly
- Check HubSpot app configuration
- Review token encryption/decryption

## Performance Optimization

### Function Configuration
```json
{
  "functions": {
    "src/pages/api/auth/*.ts": {
      "maxDuration": 30
    },
    "src/pages/api/reports/*.ts": {
      "maxDuration": 60,
      "memory": 1024
    }
  }
}
```

### Caching Strategy
- API responses cached appropriately
- Static assets optimized
- Database connection pooling
- CDN configuration for assets

## Post-Deployment Tasks

### Immediate (After Deployment)
1. [ ] Update HubSpot app redirect URLs
2. [ ] Test complete OAuth flow
3. [ ] Verify all API endpoints work
4. [ ] Check error logging and monitoring

### Follow-up (Next Phase)
1. [ ] Upload HubSpot UI Extension via CLI
2. [ ] Test extension in HubSpot environment
3. [ ] Configure app cards in CRM records
4. [ ] Monitor usage and performance

## Dependencies

### Completed Tasks Required
- [x] Task #7: Sales Intelligence API Testing âœ…
- [x] Task #12: HubSpot CLI Research âœ…
- [ ] Task #8: HubSpot Public App Setup (user action required)

### Environment Requirements
- [ ] HubSpot OAuth credentials from user's app setup
- [ ] Vercel account with appropriate plan
- [ ] Domain name (optional, can use vercel.app)

## Success Criteria

### Technical
- [ ] All API endpoints respond correctly
- [ ] OAuth flow completes successfully
- [ ] Database queries execute properly
- [ ] Error handling works as expected
- [ ] Performance meets requirements

### Integration
- [ ] HubSpot app configuration updated
- [ ] Redirect URLs working correctly
- [ ] Token storage and retrieval functional
- [ ] CORS allows HubSpot domain access

## Timeline
- **Preparation**: 30 minutes (environment variables setup)
- **Deployment**: 10 minutes (actual deployment)
- **Configuration**: 15 minutes (domain and HubSpot app updates)
- **Testing**: 30 minutes (comprehensive flow testing)
- **Total Estimated Time**: 1.5 hours

## Next Steps After Completion
1. Upload HubSpot UI Extension using CLI
2. Configure CRM record customization
3. Test complete integration flow
4. Monitor production usage and performance